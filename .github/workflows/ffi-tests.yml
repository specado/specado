name: FFI Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'crates/specado-ffi/**'
      - '.github/workflows/ffi-tests.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'crates/specado-ffi/**'
      - '.github/workflows/ffi-tests.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test-matrix:
    name: FFI Tests (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    # Linux-specific setup
    - name: Install Valgrind (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
    
    # Build FFI library
    - name: Build FFI library
      run: cargo build --package specado-ffi --release
    
    # Run Rust tests
    - name: Run Rust FFI tests
      run: cargo test --package specado-ffi --release
    
    # Run C tests on Linux/macOS
    - name: Compile and run C tests (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd crates/specado-ffi/tests/c_tests
        gcc -o test_ffi test_ffi.c -L../../../../target/release -lspecado_ffi -I../../include
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          export LD_LIBRARY_PATH=../../../../target/release:$LD_LIBRARY_PATH
        else
          export DYLD_LIBRARY_PATH=../../../../target/release:$DYLD_LIBRARY_PATH
        fi
        ./test_ffi
    
    # Run C tests on Windows
    - name: Compile and run C tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        cd crates\specado-ffi\tests\c_tests
        cl /I..\..\include test_ffi.c /link ..\..\..\..\target\release\specado_ffi.lib
        set PATH=%PATH%;..\..\..\..\target\release
        test_ffi.exe
    
    # Memory leak tests with Valgrind (Linux only)
    - name: Run Valgrind memory tests (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
      run: |
        cd crates/specado-ffi/tests/c_tests
        export LD_LIBRARY_PATH=../../../../target/release:$LD_LIBRARY_PATH
        valgrind --leak-check=full --show-leak-kinds=all --error-exitcode=1 ./test_ffi
    
    # Test with AddressSanitizer (Linux/macOS, nightly only)
    - name: Test with AddressSanitizer
      if: matrix.rust == 'nightly' && matrix.os != 'windows-latest'
      run: |
        export RUSTFLAGS="-Z sanitizer=address"
        export ASAN_OPTIONS="detect_leaks=1"
        cargo test --package specado-ffi --target ${{ matrix.target }} -Z build-std
    
    # Generate header file and verify
    - name: Verify header generation
      run: |
        cargo build --package specado-ffi
        test -f crates/specado-ffi/include/specado.h || exit 1

  cross-compile:
    name: Cross-compile tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - i686-unknown-linux-gnu
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross
      run: cargo install cross --locked
    
    - name: Build for ${{ matrix.target }}
      run: cross build --package specado-ffi --target ${{ matrix.target }} --release
    
    - name: Test for ${{ matrix.target }}
      run: cross test --package specado-ffi --target ${{ matrix.target }} --release

  language-bindings:
    name: Test language bindings
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build FFI library
      run: cargo build --package specado-ffi --release
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Test Python bindings
      run: |
        cd crates/specado-ffi
        python3 -c "
import ctypes
import os

# Load the library
lib_path = os.path.join(os.getcwd(), '../../target/release/libspecado_ffi.so')
lib = ctypes.CDLL(lib_path)

# Test version function
lib.specado_version.restype = ctypes.c_char_p
version = lib.specado_version()
print(f'FFI Version: {version.decode()}')
assert b'specado' in version

# Test context creation
lib.specado_context_new.restype = ctypes.c_void_p
ctx = lib.specado_context_new()
assert ctx != 0

# Free context
lib.specado_context_free.argtypes = [ctypes.c_void_p]
lib.specado_context_free(ctx)

print('Python FFI tests passed!')
"
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Test Node.js bindings
      run: |
        cd crates/specado-ffi
        npm init -y
        npm install ffi-napi ref-napi
        node -e "
const ffi = require('ffi-napi');
const path = require('path');

// Load the library
const libPath = path.join(__dirname, '../../target/release/libspecado_ffi.so');
const lib = ffi.Library(libPath, {
    'specado_version': ['string', []],
    'specado_context_new': ['pointer', []],
    'specado_context_free': ['void', ['pointer']]
});

// Test version
const version = lib.specado_version();
console.log('FFI Version:', version);

// Test context
const ctx = lib.specado_context_new();
console.log('Context created:', ctx);
lib.specado_context_free(ctx);

console.log('Node.js FFI tests passed!');
"

  benchmark:
    name: FFI Performance Benchmark
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build FFI library (release)
      run: cargo build --package specado-ffi --release
    
    - name: Run benchmarks
      run: |
        cd crates/specado-ffi
        cargo bench --features benchmark
    
    - name: FFI overhead measurement
      run: |
        echo "TODO: Add FFI overhead benchmarks"