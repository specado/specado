//! Generate documentation for Specado schemas
//!
//! This example demonstrates how to use the documentation generator
//! to create markdown documentation from JSON Schema definitions.
//!
//! Copyright (c) 2025 Specado Team
//! Licensed under the Apache-2.0 license

use specado_schemas::create_doc_generator;
use std::fs;
use std::path::PathBuf;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Paths to schema files
    let schemas_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()  // Go to crates directory
        .parent().unwrap()  // Go to project root
        .join("schemas");
    let docs_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent().unwrap()
        .parent().unwrap()
        .join("docs")
        .join("schemas");
    
    // Create docs directory if it doesn't exist
    fs::create_dir_all(&docs_dir)?;
    
    // Generate documentation for PromptSpec
    println!("Generating documentation for PromptSpec...");
    let prompt_spec_path = schemas_dir.join("prompt-spec.schema.json");
    let prompt_spec_content = fs::read_to_string(&prompt_spec_path)?;
    let prompt_spec: serde_json::Value = serde_json::from_str(&prompt_spec_content)?;
    
    let generator = create_doc_generator();
    let prompt_doc = generator.generate(&prompt_spec)?;
    
    let prompt_doc_path = docs_dir.join("prompt-spec.md");
    fs::write(&prompt_doc_path, prompt_doc)?;
    println!("  ✅ Written to: {}", prompt_doc_path.display());
    
    // Generate documentation for ProviderSpec
    println!("Generating documentation for ProviderSpec...");
    let provider_spec_path = schemas_dir.join("provider-spec.schema.json");
    let provider_spec_content = fs::read_to_string(&provider_spec_path)?;
    let provider_spec: serde_json::Value = serde_json::from_str(&provider_spec_content)?;
    
    let provider_doc = generator.generate(&provider_spec)?;
    
    let provider_doc_path = docs_dir.join("provider-spec.md");
    fs::write(&provider_doc_path, provider_doc)?;
    println!("  ✅ Written to: {}", provider_doc_path.display());
    
    // Generate combined documentation index
    println!("Generating documentation index...");
    let index = format!(
        r#"# Specado Schema Documentation

## Available Schemas

### [PromptSpec](./prompt-spec.md)
Uniform request format for LLM provider interactions. Defines a standardized way to structure prompts, messages, and model configurations across different LLM providers.

### [ProviderSpec](./provider-spec.md)
Provider capabilities and mapping configurations. Describes how to map PromptSpec requests to provider-specific API formats and handle responses.

## Quick Start

1. **PromptSpec**: Use this schema to validate requests before sending to LLM providers
2. **ProviderSpec**: Use this schema to configure provider-specific mappings and capabilities

## Schema Versions

- **JSON Schema**: Draft 2020-12
- **PromptSpec Version**: 1.0
- **ProviderSpec Version**: 1.0

---

*Generated by Specado Schema Documentation Generator*
"#
    );
    
    let index_path = docs_dir.join("README.md");
    fs::write(&index_path, index)?;
    println!("  ✅ Written to: {}", index_path.display());
    
    println!("\n✨ Documentation generation complete!");
    println!("   View the generated documentation in: {}", docs_dir.display());
    
    Ok(())
}