name: Build Python Wheels

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full history for version detection
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        override: true
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin cibuildwheel build
        
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        # Build wheels for Python 3.8-3.12
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        # Skip 32-bit and musl builds
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
        # Configure build environment
        CIBW_ENVIRONMENT_LINUX: 'CARGO_NET_GIT_FETCH_WITH_CLI=true'
        CIBW_ENVIRONMENT_MACOS: 'CARGO_NET_GIT_FETCH_WITH_CLI=true'
        CIBW_ENVIRONMENT_WINDOWS: 'CARGO_NET_GIT_FETCH_WITH_CLI=true'
        # Test installation
        CIBW_TEST_REQUIRES: pytest pytest-asyncio
        CIBW_TEST_COMMAND: python -c "import specado; print(specado.version())"
        # Set working directory
        CIBW_PROJECT_REQUIRES_PYTHON: ">=3.8"
        
    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/*.whl
        
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        override: true
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build maturin
        
    - name: Build source distribution
      run: |
        cd crates/specado-python
        python -m build --sdist
        
    - name: Upload sdist as artifact
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: crates/specado-python/dist/*.tar.gz
        
  test-wheels:
    name: Test wheels
    needs: [build-wheels, build-sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/
        
    - name: Install wheel
      run: |
        python -m pip install --upgrade pip
        # Find and install the wheel for this Python version
        python -m pip install wheelhouse/*.whl
        
    - name: Test installation
      run: |
        python -c "import specado; print('✅ Import successful')"
        python -c "import specado; print(f'Version: {specado.version()}')"
        python -c "import specado; print('✅ Basic functionality test passed')"
        
    - name: Run basic tests
      run: |
        pip install pytest pytest-asyncio
        python -c "
        import specado
        import pytest
        
        # Test basic functionality
        try:
            # Test Message creation
            msg = specado.Message('user', 'Hello')
            assert msg.role == 'user'
            assert msg.content == 'Hello'
            print('✅ Message creation test passed')
            
            # Test PromptSpec creation
            prompt = specado.PromptSpec(
                model_class='Chat',
                messages=[msg],
                strict_mode='warn'
            )
            assert prompt.model_class == 'Chat'
            print('✅ PromptSpec creation test passed')
            
            # Test validation
            result = specado.validate(prompt, 'prompt')
            assert hasattr(result, 'is_valid')
            print('✅ Validation test passed')
            
            print('✅ All basic tests passed')
            
        except Exception as e:
            print(f'❌ Test failed: {e}')
            raise
        "
        
  publish-pypi:
    name: Publish to PyPI
    needs: [test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/specado
    permissions:
      id-token: write  # Required for trusted publishing
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist/
        
    - name: Prepare distribution files
      run: |
        mkdir -p upload/
        find dist/ -name "*.whl" -exec cp {} upload/ \;
        find dist/ -name "*.tar.gz" -exec cp {} upload/ \;
        ls -la upload/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: upload/
        skip-existing: true
        
  publish-test-pypi:
    name: Publish to Test PyPI
    needs: [test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/specado
    permissions:
      id-token: write  # Required for trusted publishing
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist/
        
    - name: Prepare distribution files
      run: |
        mkdir -p upload/
        find dist/ -name "*.whl" -exec cp {} upload/ \;
        find dist/ -name "*.tar.gz" -exec cp {} upload/ \;
        ls -la upload/
        
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: upload/
        skip-existing: true